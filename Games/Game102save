<html>
    <head>
		<style>
			.unselectable {
				-webkit-user-select: none;
				-webkit-touch-callout: none;
				-moz-user-select: none;
				-ms-user-select: none;
				 user-select: none;
			}
		</style>
	</head>
    <body>
	<button onclick = "start()">start</button>
	<br>
        <canvas id="canvas1" width="300" height="200" style="border:1px solid #000000;">
        </canvas> 
		
    <script>
	
	//create the 2d canvas
	var c=document.getElementById("canvas1");
	var ctx=c.getContext("2d");
    
	// Set the width and height of the canvas
    c.width = window.innerWidth/2;
    c.height = window.innerHeight/1.5;
	
	//declare mouse event
    window.addEventListener('mousemove',function(event) {
		mouse.x = event.x;
		mouse.y = event.y;
    });
    
	// Add keyboard event listeners
	window.addEventListener("keydown", function (event) {
		if (event.key === "ArrowLeft") {
			direcMove(-3);
		} else if (event.key === "ArrowRight") {
			direcMove(3);
		} else if (event.key === "ArrowUp") {
			accelerate(-0.5, 1000);
			jumpFlag = 0;
		}
	});

	window.addEventListener("keyup", function (event) {
		if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
			direcMove(0);
		}
	});
	//declare mouse initial position
    var mouse = {
        x : 10,
        y : 10
    }
    
	//speed array not used here
    var direcArray = [
        -1,
        1,
        -2,
        2
    ]
	//color array
    var colorArray = [
        "#9999FF",
        "#FF007F",
        "#CC99FF",
        "black",
        "#A0A0A0"
    ]
	
	var elevateTime = 0;
	function bounce(friction, gravity) {
		this.friction = friction;
		this.gravity = gravity;
	}
	var BallBounce = new bounce(0.4, 0.2);

	function moveButton(horizontal) {
		this.horizontal = horizontal;
	}	
    var horMove = new moveButton(0);
	//this function is specifically for creating texts on the canvaas 
    function Text(string, width, height) {
        this.string = string;
        this.width = width;
        this.height = height;
       // this.color = colorArray [ Math.floor(Math.random() * colorArray .length)];
        this.drawText = function() {
		//draws the texts
            ctx.beginPath()
            ctx.font = "30px Comic Sans MS";
            ctx.fillStyle = "black";
            ctx.strokeStyle = ("green");
            ctx.textAlign = "center";
            ctx.fillText(this.string, this.width, this.height);
            ctx.stroke();
            ctx.fill();
            ctx.closePath();
        }
    }
    
	//this function is specifically for creating rectangles on the canvaas
    function line(x,y,dx,dy,width, height) {
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
        this.width = width;
        this.height = height;
        this.color = colorArray [ Math.floor(Math.random() * colorArray .length)];
        this.drawRect = function() {
		//draws the rectangle
            ctx.beginPath()
            ctx.strokeStyle = ("green");
            ctx.fillStyle = this.color;
            ctx.fillRect(this.x,this.y,this.width,this.height);
            ctx.stroke();
            ctx.fill();
            ctx.closePath();
        }
        
		this.updateRect = function() {
			//moves the object forward
			this.x+= this.dx;
			this.y+= this.dy;
			//prevents object from going out of bounds(although not strong enough)
			//if hits either ends, go the opposite direction
			if (this.x + this.width > c.width || this.x - this.width < 0) {
				this.dx = -this.dx;
			};
			if (this.y + this.height > (c.height + this.height)) {
				this.x = getRandomArbitrary(0,c.width-50);
				this.y = -(20+this.height);
			}
			this.drawRect();
		}
    }
    
	var jumpFlag = 0;
	//this function is specifically for creating circles on the canvaas
    function balls(x,y,dx,dy,radius) {
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
        this.radius = radius;
        this.color = colorArray [ Math.floor(Math.random() * colorArray .length)];
        this.draw = function() {
			//draws the circle
            ctx.beginPath()
            ctx.fillStyle = this.color;
            ctx.strokeStyle = ("green");
            ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,false);
			ctx.stroke();
			ctx.fill();
			ctx.closePath();
        };
        
		this.update = function() {
			//moves the object forward
			this.x+= (this.dx + horMove.horizontal);
			this.y+= this.dy;
			//prevents object from going out of bounds(although not strong enough)
			//if hits either ends, go the opposite direction
			if (this.x + this.radius > c.width) {
				this.x = c.width - this.radius;
				this.dx = -this.dx;
			}
			else if(this.x - this.radius < 0) {
				this.x = 0 + this.radius;
				this.dx = -this.dx;
			}
			if (this.y + this.radius > c.height) {
				jumpFlag = 1;
				this.y = c.height - this.radius;
				this.dy = -this.dy * BallBounce.friction;
			}
			else if ( this.y - this.radius < 0) {
				this.y = 0 + this.radius;
				this.dy = this.dy * 0.001;
			}
			else {
				this.dy += BallBounce.gravity;
			}
			this.draw();
		}
    }
	barsLine = [];
	var bars = 7;
	
	var gBall = new balls(c.width/2,c.height/2,0,3,10);
	var chatBot = new Text("You lose", c.height/2,70);
	var deathLine = new line(0,c.height-10,0,0,c.width,10);
	var enscore = new Text(0,c.height/2,30);
	
	var x = getRandomArbitrary(0,c.width-50);
	var y = c.height-80;
	for(i = 0; i < bars; i++) {
		x = getRandomArbitrary(0,250);
		barsLine[i] = new line(x,y,0,0.6,40,10);
		y = y - 80;
	}

//gets random from range of numbers
//https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}
//gets the distance between objects
function getDistance(x1,y1,x2,y2) {
    var xDistance = x2 - x1;
    var yDistance = y2 - y1;
    return Math.sqrt(Math.pow(xDistance,2) + Math.pow(yDistance,2));
}

//idea, clamping
//gets the maximum value(or point) from an object and a surface or another object
//explanation: https://www.youtube.com/watch?v=D2a5fHX-Qrs
function rangeOfCol(firstX,secondX,firstSize) {
    return Math.max(firstX, Math.min(secondX, firstX + firstSize));
}

var dura = 200;
var hasJump = false;

function accelerate(n, duration) {
	if(jumpFlag == 1) {
		BallBounce.gravity = n;
	}
	setTimeout(function() {
		BallBounce.gravity = 0.2; // Restore the default gravity after the duration
		jumpFlag = 0;
	}, dura);
}

	
function direcMove(n) {
	horMove.horizontal = n;
}

var sccount = 0;
var tIme = 0;

function start() {
	function animate() {
		requestAnimationFrame(animate);
		console.log(tIme);
		
		/*
		//rather than clearRect, this also clears the canvas but leaves a bit left to create a trail
		ctx.fillStyle="rgba(255,255,255,0.3)"; 
		ctx.fillRect(0,0,canvas1.width,canvas1.height);    
		*/
		ctx.clearRect(0,0,c.width,c.height);
		
		enscore.drawText();
		gBall.update();
		for(i = 0; i < barsLine.length; i++) {
			barsLine[i].updateRect();
		}
		for(i = 0; i<barsLine.length; i++) {
			var xBound = rangeOfCol(barsLine[i].x,gBall.x,barsLine[i].width);
			var yBound = rangeOfCol(barsLine[i].y,gBall.y,barsLine[i].height);
			
			var point = getDistance(xBound, yBound, gBall.x,gBall.y);
			
			
			if(point < gBall.radius) {
				//jumpFlag = 1;
				gBall.x -= horMove.horizontal;
				gBall.y -= gBall.dy;
				gBall.dy = -(gBall.dy * 0.01);
				//barline.y -= (barline.dy);
				if(gBall.radius <= 10) {
					gBall.radius++;
				}
				if(barsLine[i].y < gBall.y) {
					gBall.y = barsLine[i].y + (barsLine[i].height + gBall.radius + 3);
				}
				else {
					jumpFlag = 1;
					gBall.y = barsLine[i].y -  (gBall.radius + 1);
				}
			}		
		}
		
		if(sccount == 0) {
			tIme = 0;
		}
		sccount++;
		if((sccount%100)==0) {
			if(gBall.radius != 0) {
				enscore.string += 1;
			}
			for(i = 0; i<barsLine.length; i++) {
				if(tIme != 0 && (tIme%20) == 0 && tIme < 50) {
					barsLine[i].dy *= 1.4;
				}
			}
			
			tIme++;
		}
		if(tIme > 3) {
			deathLine.color = "red";
			deathLine.drawRect();
			
			var deathX = rangeOfCol(deathLine.x,gBall.x,deathLine.width);
			var deathY = rangeOfCol(deathLine.y,gBall.y,deathLine.height);
			
			var deathPoint = getDistance(deathX, deathY, gBall.x,gBall.y);
			
			if(deathPoint < gBall.radius) {
				ctx.fillStyle = "rgb(210,51,51,0.3)";
				ctx.fillRect(0,0,c.width,c.height);
				if(gBall.radius > 0) {
					gBall.radius--;
				}
			}
		}
		
		if(gBall.radius == 0) {
			gBall.x = c.width + gBall.radius;
			gBall.y = c.height + gBall.radius;
			enscore.string += 0;
			tIme = 0;
			chatBot.drawText();
		}
	}
	animate();
}

    </script>
<br>
<div class="unselectable">
<button onmouseenter = "direcMove(-3)" onmouseleave = "direcMove(0)">Left</button>
<button onclick = "accelerate(-0.5, 1000); jumpFlag = 0">Accelerate</button>
<button onmouseenter = "direcMove(3)" onmouseleave = "direcMove(0)">Right</button>
</div>
    </body>
</html>